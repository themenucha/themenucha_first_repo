//*includes*//
#include<linux/module.h>
#include<linux/kernel.h>
#include<linux/fs.h> //* for file operations struct *//
#include<linux/cdev.h> //char driver- registration,
#include<linux/semaphore.h>// driver sync
#include<asm/uaccess.h> //to user/ copy from user//
MODULE_AUTHOR("Kirill Zemenucha");
MODULE_LICENSE("GPL");

//*CREATING A FAKE DEVICE*//
struct my_fake_device {
char data[100];
struct semaphore sem;
}virtual_device;
//* CDEV
struct cdev *mycdev;
int major_number; //for major number
int ret; //to hold the return values
dev_t dev_num; //to hold the major number from kernel
#define DEVICE_NAME "kirill_dev" //in proc/devices
//KERNEL FUNCTOINS DEFENITIONS//
int device_open(struct inode *inode, struct file *filp){
if(down_interruptible(&virtual_device.sem)!=0){
printk(KERN_ALERT "kirill_dev: could not lock the device during opening");
return -1;
}
printk(KERN_INFO " kirill_dev: the device is opened");
return 0;
}
ssize_t device_read(struct file *filp, char* buffStoreData, size_t buffCount, loof_t* offset){
printk(KERN_INFO "kirill_dev:reading from the divice");
ret=copy_to_user(buffStoreData,virtual_device.data,buffCount);
return ret;
}
device_write(struct file *filp, char* buffSourceData, size_t buffCount, loof_t* offset){
printk(KERN_INFO "kirill_dev:writing to the divice");
ret = copy_from_user(virtual_device.data,buffSourceData,buffCount);
return ret;
}
int device_release(struct inode *inode, struct file *filp){
up(&virtual_device.sem);
printk(KERN_INFO "kirill_dev: device is closed");
return 0;
}


struct file operations fops = {
.owner = THIS MODULE,
.open = device_open,
.release  = device_release,
.write = device_write,
.read = device_read
};
//DRIVER INIT//
static int dirver_init(void){
ret=alloc_chrdev_region(&dev_num,0,1,DEVICE_NAME);
if(ret<0)
	{
	printk(KERN_ALERT " kirill_dev: failed to allocate a major number");
return ret;
	}
major_number=MAJOR(dev_num);
printk(KERN_INFO "kirill_dev:The major number is %d",major_number);
printk(KERN_INFO " \tuse \"mkmnod /dev/%s" c %d 0\" for device file",DEVICE_)NAME,major_number); //dmesg printout
// struct cdev setup
mycdev = cdev_alloc();
mycdev->ops = &fops;
mycdev->owner = THIS MODULE;
ret = cdev_add(mycdev,dev_num,1);
if(ret<0)
	{
	 printk(KERN_ALERT"kirill_dev: unable to add cdev to kernel");
return ret;
	}
sem_init(&ivirtual_device.sem,1);

return 0;
}

//DRIVER EXIT//
static void driver_exit(void){
cdev_del(mycdev);
unregister_chrdev_region(dev_num,1);
printk(KERN_ALERT "kirill_dev:the module is unloaded");
}
//MODULES/
module_init(driver_init);
module_exit(driver_exit);




